language: cpp
sudo: true

branches:
  only:
  - master

cache:
- directories:
  - $HOME/.cache

addons:
  apt:
    packages:
      - gdb

script:
  - export AWS_KVS_LOG_LEVEL=3
  - make
  - ulimit -c unlimited -S
  - timeout --signal=SIGABRT 120m ./tst/producer_test --gtest_break_on_failure

after_failure:
  - for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/tst/producer_test core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done;

matrix:
  # MemorySanitizer and UndefinedBehaviorSanitizer are still WIP
  allow_failures:
    - env: allowTestFail=true

  include:
    # MacOS Builds
    - name: "OSX GCC"
      os: osx
      compiler: gcc
      before_script:
        - mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DBUILD_COMMON_LWS=TRUE
      script:
        - make
        - ./tst/producer_test --gtest_break_on_failure
      after_failure: skip # timeout not available on MacOS

    - name: "OSX Clang"
      os: osx
      compiler: clang
      before_script:
        - mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DCOMPILER_WARNINGS=TRUE
      script:
        - make
        - ./tst/producer_test --gtest_break_on_failure
      after_failure: skip # timeout not available on MacOS

    # Code Coverage
    - name: "Linux GCC Code Coverage"
      os: linux
      compiler: gcc
      before_script:
        - mkdir build && cd build && cmake .. -DCODE_COVERAGE=TRUE -DBUILD_TEST=TRUE -DBUILD_COMMON_LWS=TRUE
      after_success:
        - for test_file in $(find cproducer.dir kvsCommonCurl.dir kvsCommonLws.dir -name '*.gcno'); do gcov $test_file; done
        - bash <(curl -s https://codecov.io/bash)

    # AddressSanitizer
    - name: "Linux Clang AddressSanitizer"
      os: linux
      compiler: clang
      # env: ASAN_OPTIONS=detect_odr_violation=0:detect_leaks=1
      env: allowTestFail=true
      before_script: mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DADDRESS_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE

    # UndefinedBehaviorSanitizer
    - name: "Linux Clang UndefinedBehaviorSanitizer"
      os: linux
      compiler: clang
      env: allowTestFail=true
      # env: UBSAN_OPTIONS=halt_on_error=1
      before_script: mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DUNDEFINED_BEHAVIOR_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE

    # MemorySanitizer
    - name: "Linux Clang MemorySanitizer"
      os: linux
      compiler: clang
      env: allowTestFail=true
      before_script: mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DMEMORY_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE

    # ThreadSanitizer
    - name: "Linux Clang ThreadSanitizer"
      os: linux
      compiler: clang
      env: allowTestFail=true
      before_script: mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DTHREAD_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE

    # Old Version GCC 4.4
    - name: "Linux GCC 4.4 Build"
      env: allowTestFail=true
      os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-4.4
            - gdb
      compiler: gcc
      before_script: export CC=gcc-4.4 && mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DBUILD_COMMON_LWS=TRUE

    # Cross-compilation to ARM, no tests are run
    - name: "ARM Cross-compilation"
      env: allowTestFail=true
      os: linux
      addons:
        apt:
          packages:
            - gcc-arm-linux-gnueabi
            - g++-arm-linux-gnueabi
            - binutils-arm-linux-gnueabi
      compiler: gcc
      before_script:
        - export CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++
        - mkdir build && cd build
        - cmake .. -DBUILD_TEST=TRUE
      script: make
