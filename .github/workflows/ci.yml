name: Producer C SDK CI

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master

env:
  AWS_KVS_LOG_LEVEL: 7

jobs:
  mac-os-builds:
    strategy:
      matrix:
        compiler:
          - name: Clang
            cc: clang
            cxx: clang++
#          - name: gcc-14
#            cc: gcc-14
#            cxx: g++-14
        cpu:
          - name: Intel
            image: macos-13
          - name: Apple Silicon
            image: macos-15
        openssl:
          - specific-preinstalled
          - from-source
          - deps-off
      fail-fast: false

    name: ${{ matrix.cpu.name }} Mac-${{ matrix.compiler.name }}-${{ matrix.openssl }}
    runs-on: ${{ matrix.cpu.image }}

    permissions:
      id-token: write
      contents: read

    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'

      - name: Setup envs for including OpenSSL locally
        if: ${{ matrix.openssl == 'specific-preinstalled' }}
        run: |
          OPENSSL_PATH=$(brew --prefix openssl@3)
          echo "LDFLAGS=-L$OPENSSL_PATH/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$OPENSSL_PATH/include" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$OPENSSL_PATH" >> $GITHUB_ENV
          echo "CMAKE_FLAGS_EXTRA=-DLOCAL_OPENSSL_BUILD=ON" >> $GITHUB_ENV

      - name: Set CMake flags for Dependencies=OFF
        if: ${{ matrix.openssl == 'deps-off' }}
        run: |
          brew install googletest
          echo "CMAKE_FLAGS_EXTRA=-DBUILD_DEPENDENCIES=OFF" >> $GITHUB_ENV

      - name: Build repository
        if: ${{ !(matrix.compiler.name == 'gcc-14' && matrix.openssl == 'deps-off') }}
        run: |
          $CC --version
          $CXX --version
          mkdir build && cd build
          cmake .. -DBUILD_TEST=ON $CMAKE_FLAGS_EXTRA
          make -j

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ !(matrix.compiler.name == 'gcc-14' && matrix.openssl == 'deps-off') }}
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Run tests
        if: ${{ !(matrix.compiler.name == 'gcc-14' && matrix.openssl == 'deps-off') }}
        working-directory: ./build
        run: |
          ./tst/producer_test

  linux-gcc-code-coverage:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DCODE_COVERAGE=TRUE -DBUILD_TEST=TRUE -DBUILD_COMMON_LWS=TRUE
          make
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600
      - name: Run tests
        run: |
          cd build
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure
      - name: Code coverage
        run: |
          cd build
          for test_file in $(find cproducer.dir kvsCommonCurl.dir kvsCommonLws.dir -name '*.gcno'); do gcov $test_file; done
          bash <(curl -s https://codecov.io/bash)

  address-sanitizer:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    env:
      CC: clang
      CXX: clang++
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DADDRESS_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
          make
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600
      - name: Run tests
        run: |
          cd build
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  undefined-behavior-sanitizer:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    env:
      CC: clang
      CXX: clang++
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DUNDEFINED_BEHAVIOR_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
          make
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600
      - name: Run tests
        run: |
          cd build
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  # memory-sanitizer:
  #   runs-on: ubuntu-20.04
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CC: clang
  #     CXX: clang++
  #     AWS_KVS_LOG_LEVEL: 2
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v3
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #         role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Build repository
  #       run: |
  #         mkdir build && cd build
  #         cmake .. -DBUILD_TEST=TRUE -DMEMORY_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
  #         make
  #         ulimit -c unlimited -S
  #         timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  # thread-sanitizer:
  #  runs-on: ubuntu-20.04
  #  permissions:
  #    id-token: write
  #    contents: read
  #  env:
  #    CC: clang
  #    CXX: clang++
  #    AWS_KVS_LOG_LEVEL: 2
  #  steps:
  #    - name: Clone repository
  #      uses: actions/checkout@v3
  #    - name: Configure AWS Credentials
  #      uses: aws-actions/configure-aws-credentials@v4
  #      with:
  #        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #        role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
  #        aws-region: ${{ secrets.AWS_REGION }}
  #    - name: Build repository
  #      run: |
  #        mkdir build && cd build
  #        cmake .. -DBUILD_TEST=TRUE -DTHREAD_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
  #        make
  #    - name: Run tests
  #      run: |
  #        cd build
  #        ulimit -c unlimited -S
  #        timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  ubuntu-gcc:
    strategy:
      matrix:
        container:
          - name: Ubuntu 20.04
            image: public.ecr.aws/ubuntu/ubuntu:20.04_stable
          - name: Ubuntu 22.04
            image: public.ecr.aws/ubuntu/ubuntu:22.04_stable
          - name: Ubuntu 24.04
            image: public.ecr.aws/ubuntu/ubuntu:24.04_stable
        build-configuration:
          - name: curl
            cmake-args: "-DBUILD_COMMON_CURL=ON -DBUILD_COMMON_LWS=OFF"
          - name: lws
            cmake-args: "-DBUILD_COMMON_CURL=OFF -DBUILD_COMMON_LWS=ON"
      fail-fast: false

    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.container.image }}

    name: ${{ matrix.container.name }}-gcc-${{ matrix.build-configuration.name }}

    env:
      DEBIAN_FRONTEND: noninteractive
      CC: gcc
      CXX: g++

    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y git cmake build-essential pkg-config

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'

      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=ON ${{ matrix.build-configuration.cmake-args }}
          make -j

      - name: Check libCurl
        if: ${{ matrix.build-configuration.name == 'curl' }}
        working-directory: ./open-source/lib
        run: |
          set -x
          readelf -d libcurl.so | grep -i "runpath"
          ldd libcurl.so
          echo "Checking ldd output for missing dependencies..."
          if ldd libcurl.so | grep "not found"; then
            echo "❌ Missing dependencies detected in libcurl.so"
            exit 1
          else
            echo "✅ All dependencies are found"
          fi

      - name: Configure AWS Credentials
        # Producer-C only has CURL implementation
        if: ${{ matrix.build-configuration.name == 'curl' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Run tests
        # Producer-C only has CURL implementation
        if: ${{ matrix.build-configuration.name == 'curl' }}
        working-directory: ./build
        run: |
          timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  arm64-cross-compilation:
    runs-on: ubuntu-22.04
    env:
      CC: aarch64-linux-gnu-gcc
      CXX: aarch64-linux-gnu-g++
    steps:
      - name: Install dependencies
        run: |
          sudo apt clean && sudo apt update
          sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'
      - name: Build Repository
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DBUILD_OPENSSL_PLATFORM=linux-generic64
          make -j
          file libcproducer.so

  linux-aarch64-cross-compilation:
    runs-on: ubuntu-22.04
    env:
      CC: aarch64-linux-gnu-gcc
      CXX: aarch64-linux-gnu-g++
    steps:
      - name: Install dependencies
        run: |
          sudo apt clean && sudo apt update
          sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'
      - name: Build Repository
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DBUILD_OPENSSL_PLATFORM=linux-aarch64
          make -j
          file libcproducer.so

  arm32-cross-compilation:
    runs-on: ubuntu-22.04
    env:
      CC: arm-linux-gnueabi-gcc
      CXX: arm-linux-gnueabi-g++
    steps:
      - name: Install dependencies
        run: |
          sudo apt clean && sudo apt update
          sudo apt-get -y install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi binutils-arm-linux-gnueabi

      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'

      - name: Build Repository
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DBUILD_OPENSSL_PLATFORM=linux-generic32
          make
          file libcproducer.so

  linux-build-gcc-static:
    runs-on: ubuntu-22.04
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'
      - name: Build Repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_STATIC=ON
          make

  linux-thread-size-check:
    runs-on: ubuntu-latest
    container:
      image: public.ecr.aws/ubuntu/ubuntu:22.04_stable

    env:
      DEBIAN_FRONTEND: noninteractive

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y git cmake build-essential pkg-config

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.x'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Build Repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DKVS_DEFAULT_STACK_SIZE=65536
          make -j$(nproc)

      - name: Run tests with expected failure
        run: |
          set +e
          cd build
          ./tst/producer_test --gtest_filter="ProducerClientBasicTest.*"
          TEST_EXIT_CODE=$?

          # 128 (abnormal exit) + 11 (segmentation fault) = 139
          if [ $TEST_EXIT_CODE -ne 139 ]; then
            echo "Unexpected exit code: $TEST_EXIT_CODE"
            exit 1
          fi
          echo "Test exited as expected with code $TEST_EXIT_CODE."
        shell: bash

  cmake-flags-test:
    runs-on: ubuntu-22.04
    container: public.ecr.aws/ubuntu/ubuntu:22.04_stable

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y git cmake build-essential pkg-config libssl-dev libcurl4-openssl-dev

      - name: Run CMake Flag Combination Test
        run: |
          ./tst/scripts/test_cmake_flags.sh >> $GITHUB_STEP_SUMMARY
