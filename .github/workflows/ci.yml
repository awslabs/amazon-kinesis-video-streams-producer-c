name: Producer C SDK CI

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master
jobs:
  clang-format-check:
    runs-on: macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install clang-format
        run: |
          brew install clang-format@8
      - name: Run clang format check
        run: |
          bash scripts/check-clang.sh

  mac-os-build-gcc:
    runs-on: macos-10.15
    permissions:
      id-token: write
      contents: read
    env:
      CC: gcc
      CXX: g++
      AWS_KVS_LOG_LEVEL: 2
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE
          make  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 10800
      - name: Run tests
        run: |
          cd build
          ./tst/producer_test

  mac-os-build-clang:
    runs-on: macos-latest
    env:
      AWS_KVS_LOG_LEVEL: 2
      LDFLAGS: -L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib
      CPATH: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DCOMPILER_WARNINGS=TRUE
          make
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 10800
      - name: Run tests
        run: |
          cd build
          ./tst/producer_test

  linux-gcc-code-coverage:
    runs-on: ubuntu-18.04
    env:
      AWS_KVS_LOG_LEVEL: 2
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DCODE_COVERAGE=TRUE -DBUILD_TEST=TRUE -DBUILD_COMMON_LWS=TRUE
          make
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 10800
      - name: Run tests
        run: |
          cd build
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure
      - name: Code coverage
        run: |
          cd build
          for test_file in $(find cproducer.dir kvsCommonCurl.dir kvsCommonLws.dir -name '*.gcno'); do gcov $test_file; done
          bash <(curl -s https://codecov.io/bash)

  address-sanitizer:
    runs-on: ubuntu-18.04
    permissions:
      id-token: write
      contents: read
    env:
      CC: clang
      CXX: clang++
      AWS_KVS_LOG_LEVEL: 2
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DADDRESS_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
          make
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 10800
      - name: Run tests
        run: |
          cd build
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  undefined-behavior-sanitizer:
    runs-on: ubuntu-18.04
    permissions:
      id-token: write
      contents: read
    env:
      CC: clang
      CXX: clang++
      AWS_KVS_LOG_LEVEL: 2
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DUNDEFINED_BEHAVIOR_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
          make
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 10800
      - name: Run tests
        run: |
          cd build
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  # memory-sanitizer:
  #   runs-on: ubuntu-18.04
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CC: clang
  #     CXX: clang++
  #     AWS_KVS_LOG_LEVEL: 2
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #         role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Build repository
  #       run: |
  #         mkdir build && cd build
  #         cmake .. -DBUILD_TEST=TRUE -DMEMORY_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
  #         make
  #         ulimit -c unlimited -S
  #         timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  # thread-sanitizer:
  #   runs-on: ubuntu-18.04
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CC: clang
  #     CXX: clang++
  #     AWS_KVS_LOG_LEVEL: 2
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #         role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Build repository
  #       run: |
  #         mkdir build && cd build
  #         cmake .. -DBUILD_TEST=TRUE -DTHREAD_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
  #         make
  #         ulimit -c unlimited -S
  #         timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  linux-gcc-4_4:
    runs-on: ubuntu-18.04
    env:
      AWS_KVS_LOG_LEVEL: 2
      CC: gcc-4.4
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty main'
          sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty universe'
          sudo apt-get -q update
          sudo apt-get -y install gcc-4.4
          sudo apt-get -y install gdb
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DBUILD_COMMON_LWS=TRUE
          make
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 10800
      - name: Run tests
        run: |
          cd build
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure        

  windows-msvc:
    runs-on: windows-2022
    env:
      AWS_KVS_LOG_LEVEL: 7
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          choco install nasm strawberryperl
      - name: Build repository
        run: |
          $env:Path += ';C:\Strawberry\perl\site\bin;C:\Strawberry\perl\bin;C:\Strawberry\c\bin;C:\Program Files\NASM;D:\a\amazon-kinesis-video-streams-producer-c\amazon-kinesis-video-streams-producer-c\open-source\lib;D:\a\amazon-kinesis-video-streams-producer-c\amazon-kinesis-video-streams-producer-c\open-source\bin'
          git config --system core.longpaths true
          .github/build_windows.bat
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 10800
      - name: Run tests
        run: |
          $env:Path += ';C:\Strawberry\perl\site\bin;C:\Strawberry\perl\bin;C:\Strawberry\c\bin;C:\Program Files\NASM;D:\a\amazon-kinesis-video-streams-producer-c\amazon-kinesis-video-streams-producer-c\open-source\lib;D:\a\amazon-kinesis-video-streams-producer-c\amazon-kinesis-video-streams-producer-c\open-source\bin'
          & "D:\a\amazon-kinesis-video-streams-producer-c\amazon-kinesis-video-streams-producer-c\build\tst\producer_test.exe" --gtest_filter="-ProducerFunctionalityTest.pressure_on_buffer_duration_fail_new_connection_at_token_rotation"  

  arm64-cross-compilation:
    runs-on: ubuntu-latest
    env:
      CC: aarch64-linux-gnu-gcc
      CXX: aarch64-linux-gnu-g++
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build Repository
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DBUILD_OPENSSL_PLATFORM=linux-generic64
          make
          file libKinesisVideoProducer.so
  linux-aarch64-cross-compilation:
    runs-on: ubuntu-latest
    env:
      CC: aarch64-linux-gnu-gcc
      CXX: aarch64-linux-gnu-g++
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build Repository
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DBUILD_OPENSSL_PLATFORM=linux-aarch64
          make
          file libKinesisVideoProducer.so
  arm32-cross-compilation:
    runs-on: ubuntu-latest
    env:
      CC: arm-linux-gnueabi-gcc
      CXX: arm-linux-gnueabi-g++
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt-get -y install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi binutils-arm-linux-gnueabi
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Build Repository
        run: |
          sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DBUILD_OPENSSL_PLATFORM=linux-generic32
          make
          file libKinesisVideoProducer.so

          
